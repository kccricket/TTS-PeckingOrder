{
  "SaveName": "Pecking Order 0.2",
  "GameMode": "Pecking Order",
  "Date": "6/6/2020 7:55:05 PM",
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "GameType": "Game",
  "GameComplexity": "Low Complexity",
  "PlayingTime": [
    0,
    10
  ],
  "PlayerCounts": [
    2,
    2
  ],
  "Tags": [
    "Board Games"
  ],
  "Table": "Table_Custom",
  "TableURL": "file:///C:\\Users\\kccricket\\Documents\\Source\\PeckingOrder\\Table.png",
  "Sky": "Sky_Forest",
  "Note": "",
  "Rules": "",
  "Grid": {
    "Type": 0,
    "Lines": false,
    "Color": {
      "r": 0.0,
      "g": 0.0,
      "b": 0.0
    },
    "Opacity": 0.75,
    "ThickLines": false,
    "Snapping": false,
    "Offset": false,
    "BothSnapping": false,
    "xSize": 3.25,
    "ySize": 3.25,
    "PosOffset": {
      "x": 0.0,
      "y": 1.0,
      "z": 0.0
    }
  },
  "Lighting": {
    "LightIntensity": 0.54,
    "LightColor": {
      "r": 1.0,
      "g": 0.9804,
      "b": 0.8902
    },
    "AmbientIntensity": 1.3,
    "AmbientType": 0,
    "AmbientSkyColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientEquatorColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientGroundColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "ReflectionIntensity": 1.0,
    "LutIndex": 0,
    "LutContribution": 1.0
  },
  "Hands": {
    "Enable": true,
    "DisableUnused": true,
    "Hiding": 0,
    "HandTransforms": [
      {
        "Color": "Red",
        "Transform": {
          "posX": 3.25,
          "posY": 1.25,
          "posZ": -13.0,
          "rotX": 0.0,
          "rotY": 0.0,
          "rotZ": 0.0,
          "scaleX": 5.26,
          "scaleY": 10.3740215,
          "scaleZ": 5.21439934
        }
      },
      {
        "Color": "Green",
        "Transform": {
          "posX": -3.25,
          "posY": 1.25,
          "posZ": 13.0,
          "rotX": 0.0,
          "rotY": 180.0,
          "rotZ": 0.0,
          "scaleX": 5.26,
          "scaleY": 10.3740215,
          "scaleZ": 5.21439934
        }
      }
    ]
  },
  "Turns": {
    "Enable": false,
    "Type": 0,
    "TurnOrder": [],
    "Reverse": false,
    "SkipEmpty": false,
    "DisableInteractions": false,
    "PassTurns": true,
    "TurnColor": ""
  },
  "TabStates": {
    "0": {
      "title": "Rules",
      "body": "",
      "color": "Grey",
      "visibleColor": {
        "r": 0.5,
        "g": 0.5,
        "b": 0.5
      },
      "id": 0
    }
  },
  "DecalPallet": [],
  "ObjectStates": [
    {
      "Name": "3DText",
      "Transform": {
        "posX": -3.25000286,
        "posY": 0.96,
        "posZ": -16.5000134,
        "rotX": 90.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Red Deck Label",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "Text": {
        "Text": "Deck",
        "colorstate": {
          "r": 0.856,
          "g": 0.1,
          "b": 0.094
        },
        "fontSize": 64
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "GUID": "4c69bf"
    },
    {
      "Name": "3DText",
      "Transform": {
        "posX": 3.25,
        "posY": 0.96,
        "posZ": -16.5,
        "rotX": 90.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Red Hand Label",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "Text": {
        "Text": "Hand",
        "colorstate": {
          "r": 0.856,
          "g": 0.1,
          "b": 0.094
        },
        "fontSize": 64
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "GUID": "0692da"
    },
    {
      "Name": "3DText",
      "Transform": {
        "posX": 3.25,
        "posY": 0.96,
        "posZ": 16.5,
        "rotX": 90.0,
        "rotY": 180.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Green Deck Label",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "Text": {
        "Text": "Deck",
        "colorstate": {
          "r": 0.192,
          "g": 0.701,
          "b": 0.168
        },
        "fontSize": 64
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "GUID": "8586f6"
    },
    {
      "Name": "3DText",
      "Transform": {
        "posX": -3.25000286,
        "posY": 0.96,
        "posZ": 16.5000134,
        "rotX": 90.0,
        "rotY": 180.0001,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Green Hand Label",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "Text": {
        "Text": "Hand",
        "colorstate": {
          "r": 0.192,
          "g": 0.701,
          "b": 0.168
        },
        "fontSize": 64
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "GUID": "0d43bc"
    },
    {
      "Name": "Custom_Tile",
      "Transform": {
        "posX": 0.0,
        "posY": 0.96,
        "posZ": -13.0,
        "rotX": 0.0,
        "rotY": 180.0002,
        "rotZ": -5.12697156E-08,
        "scaleX": 3.0,
        "scaleY": 1.0,
        "scaleZ": 3.0
      },
      "Nickname": "Red Player Mat",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "http://kccricket.net/tts/pecking-order/RedMat.jpg",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomTile": {
          "Type": 0,
          "Thickness": 0.1,
          "Stackable": false,
          "Stretch": true
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "GUID": "f459af"
    },
    {
      "Name": "Custom_Tile",
      "Transform": {
        "posX": 0.0,
        "posY": 0.96,
        "posZ": 13.0,
        "rotX": 0.0,
        "rotY": 180.000229,
        "rotZ": -5.12697156E-08,
        "scaleX": 3.0,
        "scaleY": 1.0,
        "scaleZ": 3.0
      },
      "Nickname": "Green Player Mat",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "http://kccricket.net/tts/pecking-order/GreenMat.jpg",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomTile": {
          "Type": 0,
          "Thickness": 0.1,
          "Stackable": false,
          "Stretch": true
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "GUID": "b271aa"
    }
  ],
  "LuaScript": "----#include PeckingOrder/Main.ttslua\nlocal PeckingOrder = {}\r\nPeckingOrder.Players = {}\r\nPeckingOrder.State = {}\r\n\r\nPeckingOrder.Debug = true\r\n\r\n----#include Logging\nfunction PeckingOrder.Log(args)\r\n    if PeckingOrder.Debug == true then\r\n        local out = string.format(unpack(args))\r\n        log(out)\r\n    end\r\nend\r\n\n----#include Logging\n----#include Enums\nPeckingOrder.Enums = {}\r\n\r\nPeckingOrder.Enums.Color = {\r\n    Yellow = {r=1,g=1,b=0}\r\n    , Blue = {r=0,g=0,b=1}\r\n    , Red = {r=1,g=0,b=0}\r\n    , Green = {r=0,g=1,b=0}\r\n    , Black = {r=0,g=0,b=0}\r\n    , White = {r=1,g=1,b=1}\r\n}\r\n\r\nPeckingOrder.Enums.ZoneType = {\r\n    Perch = 'Perch'\r\n    , Hand = 'Hand'\r\n    , Discard = 'Discard'\r\n}\r\n\n----#include Enums\n----#include Initialize\nPeckingOrder.Initialize = {}\r\n\r\n----#include InitializeParameters\nPeckingOrder.Initialize.Parameters = {}\r\nPeckingOrder.Initialize.Parameters.Players = {}\r\n\r\nPeckingOrder.Initialize.Parameters.CardZonesScale = {3.17, 10.00, 4.62}\r\nPeckingOrder.Initialize.Parameters.CardZonesYPosition = 1.25\r\nPeckingOrder.Initialize.Parameters.HandScale = {4.00, 8.00, 1.50}\r\nPeckingOrder.Initialize.Parameters.HandZoneXPosition = -3.25\r\nPeckingOrder.Initialize.Parameters.HandZoneZPosition = 13\r\nPeckingOrder.Initialize.Parameters.DeckYPosition = 1.15\r\nPeckingOrder.Initialize.Parameters.DeckScale = {1.42, 1.00, 1.42}\r\nPeckingOrder.Initialize.Parameters.PerchZonesZPosition = 7\r\nPeckingOrder.Initialize.Parameters.PerchZonesXPositions = {\r\n    ['1'] = -20.68\r\n    , ['2'] = -16.55\r\n    , ['3'] = -12.39\r\n    , ['4'] = -8.33\r\n    , ['5'] = -4.25\r\n    , ['6'] = -0.17\r\n    , ['7'] = 3.89\r\n    , ['8A'] = 8\r\n    , ['8B'] = 12.2\r\n    , ['9'] = 16.32\r\n    , ['10'] = 20.48\r\n}\r\n\r\nPeckingOrder.Initialize.Parameters.Players[1] = {\r\n    Color = \"Red\"\r\n    , YRotation = 180\r\n    , PositionMultiplier = -1\r\n}\r\n\r\nPeckingOrder.Initialize.Parameters.Players[2] = {\r\n    Color = \"Green\"\r\n    , YRotation = 0\r\n    , PositionMultiplier = 1\r\n}\r\n\r\nPeckingOrder.Initialize.Parameters.CustomDeck = {\r\n    face = \"http://kccricket.net/tts/pecking-order/FullDeck-5x3-v20170514.jpg\"\r\n    , back = \"http://kccricket.net/tts/pecking-order/Card-Back.jpg\"\r\n    , width = 5\r\n    , height = 3\r\n    , number = 13\r\n    , back_is_hidden = true\r\n}\r\n\n----#include InitializeParameters\n\r\nfunction PeckingOrder.Initialize.Players()\r\n    PeckingOrder.Log({\r\n        \"Begin PeckingOrder.Initialize.Players\"\r\n    })\r\n    for i, player in ipairs(PeckingOrder.Initialize.Parameters.Players) do\r\n        PeckingOrder.Players[i] = PeckingOrder.Initialize.Player(player, i)\r\n    end\r\nend\r\n\r\nfunction PeckingOrder.Initialize.Player(player_params, player_num)\r\n    PeckingOrder.Log({\r\n        \"Begin PeckingOrder.Initialize.Player for player %d, %s.\"\r\n        , player_num\r\n        , player_params.Color\r\n    })\r\n    local new_player = {}\r\n    new_player.Color = player_params.Color\r\n    new_player.PerchZones = PeckingOrder.Initialize.PerchZones(player_params)\r\n    new_player.DeckObject = PeckingOrder.Initialize.DeckObject(player_params)\r\n    new_player.HandZone = PeckingOrder.Initialize.HandZone(player_params)\r\n    new_player.DiscardZone = PeckingOrder.Initialize.DiscardZone(player_params)\r\n    return new_player\r\nend\r\n\r\nfunction PeckingOrder.Initialize.PerchZones(player_params)\r\n    PeckingOrder.Log({\r\n        \"Begin PeckingOrder.Initialize.PerchZones for player %s.\"\r\n        , player_params.Color\r\n    })\r\n    local new_perches = {}\r\n    for perch_num, x_position in pairs(PeckingOrder.Initialize.Parameters.PerchZonesXPositions) do\r\n        PeckingOrder.Log({\r\n            \"Creating PerchZone %s for player %s.\"\r\n            , perch_num\r\n            , player_params.Color\r\n        })\r\n        new_perches[perch_num] = spawnObject({\r\n            position = {\r\n                x_position\r\n                , PeckingOrder.Initialize.Parameters.CardZonesYPosition\r\n                , PeckingOrder.Initialize.Parameters.PerchZonesZPosition * player_params.PositionMultiplier\r\n            }\r\n            , scale = PeckingOrder.Initialize.Parameters.CardZonesScale\r\n            , type = 'ScriptingTrigger'\r\n            , sound = false\r\n            , callback_function = function(zone)\r\n                PeckingOrder.Log({\r\n                    \"Begin created callback for PerchZone %s for player %s.\"\r\n                    , perch_num\r\n                    , player_params.Color\r\n                })\r\n                zone.setVar('zone_type', PeckingOrder.Enums.ZoneType.Perch)\r\n                zone.setVar('perch_number', perch_num)\r\n                zone.setVar('player_color', player_params.Color)\r\n            end\r\n        })\r\n    end\r\n    return new_perches\r\nend\r\n\r\nfunction PeckingOrder.Initialize.DeckObject(player_params)\r\n    PeckingOrder.Log({\r\n        \"Begin PeckingOrder.Initialize.DeckObject for player %s.\"\r\n        , player_params.Color\r\n    })\r\n\r\n    local new_deck = spawnObject({\r\n        position = {\r\n            PeckingOrder.Initialize.Parameters.HandZoneXPosition * -1 * player_params.PositionMultiplier\r\n            , PeckingOrder.Initialize.Parameters.DeckYPosition\r\n            , PeckingOrder.Initialize.Parameters.HandZoneZPosition * player_params.PositionMultiplier\r\n        }\r\n        , scale = PeckingOrder.Initialize.Parameters.DeckScale\r\n        , rotation = {0.00, player_params.YRotation, 180.00}\r\n        , type = \"DeckCustom\"\r\n        , sound = false\r\n        , callback_function = function(deck)\r\n            PeckingOrder.Log({\r\n                \"Begin created callback for DeckObject for player %s.\"\r\n                , player_params.Color\r\n            })\r\n            --deck.setCustomObject(PeckingOrder.Initialize.Parameters.CustomDeck)\r\n            deck.setVar('player_color', player_params.Color)\r\n        end\r\n    })\r\n    new_deck.setCustomObject(PeckingOrder.Initialize.Parameters.CustomDeck)\r\n    return new_deck\r\nend\r\n\r\nfunction PeckingOrder.Initialize.HandZone(player_params)\r\n    PeckingOrder.Log({\r\n        \"Begin PeckingOrder.Initialize.HandZone for player %s.\"\r\n        , player_params.Color\r\n    })\r\n    return spawnObject({\r\n        position = {\r\n            PeckingOrder.Initialize.Parameters.HandZoneXPosition * player_params.PositionMultiplier\r\n            , PeckingOrder.Initialize.Parameters.CardZonesYPosition\r\n            , PeckingOrder.Initialize.Parameters.HandZoneZPosition * player_params.PositionMultiplier\r\n        }\r\n        , scale = PeckingOrder.Initialize.Parameters.CardZonesScale\r\n        , type = 'ScriptingTrigger'\r\n        , sound = false\r\n        , callback_function = function(zone)\r\n            PeckingOrder.Log({\r\n                \"Begin created callback for HandZone for player %s.\"\r\n                , player_params.Color\r\n            })\r\n            zone.setVar('zone_type', PeckingOrder.Enums.ZoneType.Hand)\r\n            zone.setVar('player_color', player_params.Color)\r\n        end\r\n    })\r\nend\r\n\r\nfunction PeckingOrder.Initialize.DiscardZone(player_params)\r\n    PeckingOrder.Log({\r\n        \"Begin PeckingOrder.Initialize.DiscardZone for player %s.\"\r\n        , player_params.Color\r\n    })\r\n    return spawnObject({\r\n        position = {\r\n            PeckingOrder.Initialize.Parameters.HandZoneXPosition * player_params.PositionMultiplier * 3\r\n            , PeckingOrder.Initialize.Parameters.CardZonesYPosition\r\n            , PeckingOrder.Initialize.Parameters.HandZoneZPosition * player_params.PositionMultiplier\r\n        }\r\n        , scale = PeckingOrder.Initialize.Parameters.CardZonesScale\r\n        , type = 'ScriptingTrigger'\r\n        , sound = false\r\n        , callback_function = function(zone)\r\n            PeckingOrder.Log({\r\n                \"Begin created callback for DiscardZone for player %s.\"\r\n                , player_params.Color\r\n            })\r\n            zone.setVar('zone_type', PeckingOrder.Enums.ZoneType.Discard)\r\n            zone.setVar('player_color', player_params.Color)\r\n        end\r\n    })\r\nend\r\n\n----#include Initialize\n\r\nPeckingOrder.State.ChallengeData = nil\r\n--local TurnsLeft = 26\r\nPeckingOrder.State.TurnsLeft = 10\r\n\r\nfunction onload()\r\n\r\n    PeckingOrder.Initialize.Players()\r\nend\r\n\r\n\r\n\r\n\r\n--[[ The Update function. This is called once per frame. --]]\r\nfunction update ()\r\n    --[[ print('Update loop!') --]]\r\nend\r\n\r\n-- function onObjectDrop(PlayerColor, DroppedObject)\r\n--     print(\"onObjectDrop\")\r\n--     if ObjectIsCard(DroppedObject) then\r\n--         -- DroppedObject.setVar('player_color', PlayerColor)\r\n--         HandleCardDrop(PlayerColor, DroppedObject)\r\n--     end\r\n-- end\r\n\r\n-- function onObjectLeaveScriptingZone(Zone, LeavingObject)\r\n--     print(\"onObjectLeaveScriptingZone\")\r\n--     if ObjectIsCard(LeavingObject) then\r\n--         if Zone.getVar('zone_type') == ZoneType.Hand and ObjectIsCard(LeavingObject) then\r\n--             FlipCardFaceDown(LeavingObject)\r\n--         end\r\n--     end\r\n-- end\r\n\r\n-- function onObjectLeaveContainer(Container, LeavingObject)\r\n--     print('onObjectLeaveContainer')\r\n--\r\n--     if ObjectIsCard(LeavingObject) and Container.tag == 'Deck' then\r\n--         local playerColor = Container.getVar('player_color')\r\n--         LeavingObject.setVar('player_color', playerColor)\r\n--         if #GetCardsInZone(getObjectFromGUID(Hands[playerColor])) > 1 then\r\n--             ReturnCardToDeck(playerColor, LeavingObject, \"Your hand already contains a card.\")\r\n--         end\r\n--     end\r\n-- end\r\n\r\n-- function onPlayerTurnEnd(PlayerColorEnd, PlayerColorNext)\r\n--     if ChallengeData then\r\n--         ResolveChallenge(ChallengeData)\r\n--         ChallengeData = nil\r\n--         TurnsLeft = TurnsLeft - 1\r\n--         print(tostring(TurnsLeft))\r\n--         if(TurnsLeft == 0) then\r\n--             ScoreGame(PlayerColorNext)\r\n--         end\r\n--     end\r\n-- end\r\n\r\n-- function ScoreGame(ScorePlayerFirst)\r\n--     local Scores = {\r\n--         [PLAYER_TWO] = 0,\r\n--         [PLAYER_ONE] = 0\r\n--     }\r\n--     local ScoreList = {\r\n--         [PLAYER_TWO] = {},\r\n--         [PLAYER_ONE] = {}\r\n--     }\r\n--     for PlayerColor, PerchList in pairs(Perches) do\r\n--         for PerchNumber, PerchGuid in pairs(PerchList) do\r\n--             if #GetCardsInZone(getObjectFromGUID(PerchGuid)) == 1 then\r\n--                 Scores[PlayerColor] = Scores[PlayerColor] + PERCH_VALUES[PerchNumber]\r\n--                 table.insert(ScoreList[PlayerColor], PERCH_VALUES[PerchNumber])\r\n--             end\r\n--         end\r\n--         -- Add 3 point bonus for controlling both 8 perches.\r\n--         if #GetCardsInZone(getObjectFromGUID(PerchList['8A'])) + #GetCardsInZone(getObjectFromGUID(PerchList['8B'])) == 2 then\r\n--             Scores[PlayerColor] = Scores[PlayerColor] + 3\r\n--         end\r\n--         print(PlayerColor .. ' ' .. tostring(Scores[PlayerColor]))\r\n--     end\r\n-- end\r\n\r\n-- function PlayerIsValid(PlayerColor)\r\n--     return PlayerColor == PLAYER_TWO or PlayerColor == PLAYER_ONE\r\n-- end\r\n\r\n-- function HandleCardDrop(PlayerColor, Card)\r\n--     print(\"HandleCardDrop\")\r\n--     if not CardIsInHand(PlayerColor, Card) and not Card.isSmoothMoving() then\r\n--         local PerchZones = GetZonesContainingCard(PERCHES[PlayerColor], Card.guid)\r\n--         if #PerchZones == 1 then\r\n--             local Perch = PerchZones[1]\r\n--             if #GetCardsInZone(Perch) == 1 then\r\n--                 SnapObjectToZone(Card, Perch)\r\n--                 ChallengeData = { ['PlayerColor'] = PlayerColor, ['Perch'] = Perch, ['Card'] = Card }\r\n--             else\r\n--                 ReturnCardToHand(PlayerColor, Card, 'This perch is not a valid location for play.')\r\n--             end\r\n--         elseif #PerchZones > 1 then\r\n--             ReturnCardToHand(PlayerColor, Card, 'Cards may not touch more than one perch.')\r\n--         else\r\n--             ReturnCardToHand(PlayerColor, Card, 'Cards must be placed on a perch.')\r\n--         end\r\n--     end\r\n-- end\r\n\r\n-- function SnapObjectToZone(Object, Zone)\r\n--     print('SnapObjectToZone')\r\n--     local TargetPosition = Zone.getPosition()\r\n--     Object.setPositionSmooth(TargetPosition)\r\n-- end\r\n--\r\n-- function ResolveChallenge(Parameters)\r\n--     local AttackerPlayer = Parameters.PlayerColor\r\n--     local AttackerPerch = Parameters.Perch\r\n--     local AttackerCard = Parameters.Card\r\n--     print('ResolveChallenge')\r\n--     local DefenderPlayer\r\n--     if AttackerPlayer == PLAYER_ONE then\r\n--         DefenderPlayer = PLAYER_TWO\r\n--     else\r\n--         DefenderPlayer = PLAYER_ONE\r\n--     end\r\n--     local PerchNumber = AttackerPerch.getVar('perch_number')\r\n--     local DefenderPerch = getObjectFromGUID(PERCHES[DefenderPlayer][PerchNumber])\r\n--     local DefenderCard = GetCardsInZone(DefenderPerch)[1]\r\n--     if DefenderCard then\r\n--         print('DefenderCard is not nil')\r\n--         if CardIsJaguar(AttackerCard) or CardIsJaguar(DefenderCard) then\r\n--             if CardIsJaguar(AttackerCard) then\r\n--                 AttackerCard.flip()\r\n--             elseif CardIsJaguar(DefenderCard) then\r\n--                 DefenderCard.flip()\r\n--             end\r\n--             DoDelayedCardDiscard({ AttackerCard, DefenderCard })\r\n--         else\r\n--             local DefenderStrength = tonumber(DefenderCard.getName())\r\n--             local AttackerStrength = tonumber(AttackerCard.getName())\r\n--             FlipCardFaceUp(DefenderCard)\r\n--             if AttackerStrength > DefenderStrength or AttackerStrength == DefenderStrength then\r\n--                 DoDelayedCardDiscard({ DefenderCard })\r\n--             elseif DefenderStrength > AttackerStrength or (AttackerStrength == DefenderStrength and PlayerControlsTieBreaker(DefenderPlayer)) then\r\n--                 DoDelayedCardDiscard({ AttackerCard })\r\n--             end\r\n--         end\r\n--     end\r\n-- end\r\n--\r\n-- function CardIsJaguar(Card)\r\n--     return Card.getName() == 'Jaguar'\r\n-- end\r\n--\r\n-- function FlipCardFaceUp(Card)\r\n--     if CardIsFaceDown(Card) then\r\n--         Card.flip()\r\n--     end\r\n-- end\r\n--\r\n-- function FlipCardFaceDown(Card)\r\n--     if CardIsFaceUp(Card) then\r\n--         Card.flip()\r\n--     end\r\n-- end\r\n--\r\n-- function CardIsFaceUp(Card)\r\n--     return not Card.is_face_down\r\n-- end\r\n--\r\n-- function CardIsFaceDown(Card)\r\n--     return Card.is_face_down\r\n-- end\r\n--\r\n-- function DoDelayedCardDiscard(Cards)\r\n--     Timer.create({\r\n--         delay = 3,\r\n--         identifier = 'DiscardCards'..os.time()..Cards[1].guid,\r\n--         function_name = 'DoImmediateCardDiscard',\r\n--         parameters = Cards\r\n--     })\r\n-- end\r\n--\r\n-- function DoImmediateCardDiscard(Cards)\r\n--     for Index, Card in ipairs(Cards) do\r\n--         local PlayerColor = Card.getVar('player_color')\r\n--         local Discard = getObjectFromGUID(Discards[PlayerColor])\r\n--         SnapObjectToZone(Card, Discard)\r\n--         Card.lock()\r\n--     end\r\n-- end\r\n--\r\n-- function ReturnCardToHand(PlayerColor, Card, Message)\r\n--     print(\"ReturnCardToHand\")\r\n--     -- local Hand = getObjectFromGUID(Hands[Card.getVar('player_color')])\r\n--     PrintPlayerWarning(PlayerColor, Message)\r\n--     -- SnapObjectToZone(Card, Hand)\r\n--     Card.deal(1, PlayerColor)\r\n-- end\r\n--\r\n-- function ReturnCardToDeck(PlayerColor, Card, Message)\r\n--     print(\"ReturnCardToDeck\")\r\n--     local Deck = getObjectFromGUID(Decks[Card.getVar('player_color')])\r\n--     PrintPlayerWarning(PlayerColor, Message)\r\n--     -- SnapObjectToZone(Card, Deck)\r\n--     local currentPosition = Card.getPosition()\r\n--     local newPosition = { x = currentPosition.x, y = currentPosition.y, z = currentPosition.z + 1 }\r\n--     Card.setPosition(newPosition, false, true)\r\n--     Card.putObject(Deck)\r\n-- end\r\n--\r\n-- function GetZonesContainingCard(Zones, CardGuid)\r\n--     print(\"GetZonesContainingCard\")\r\n--     local Result = {}\r\n--     for Location, ZoneGuid in pairs(Zones) do\r\n--         local Zone = getObjectFromGUID(ZoneGuid)\r\n--         if ZoneContainsCard(Zone, CardGuid) then\r\n--             table.insert(Result, Zone)\r\n--         end\r\n--     end\r\n--     return Result\r\n-- end\r\n--\r\n-- function ZoneContainsCard(Zone, CardGuid)\r\n--     print('ZoneContainsCard')\r\n--     local Result = false\r\n--     local ObjectsInZone = GetCardsInZone(Zone)\r\n--     if ObjectsInZone then\r\n--         for Index, Object in ipairs(ObjectsInZone) do\r\n--             if Object.guid == CardGuid then\r\n--                 Result = true\r\n--             end\r\n--         end\r\n--     end\r\n--     return Result\r\n-- end\r\n--\r\n-- function GetCardsInZone(Zone)\r\n--\r\n--     local result = {}\r\n--     local objectsInZone = Zone.getObjects()\r\n--     if objectsInZone then\r\n--         for index, object in ipairs(objectsInZone) do\r\n--             if ObjectIsCard(object) then\r\n--                 table.insert(result, object)\r\n--             end\r\n--         end\r\n--     end\r\n--     print(string.format(\"GetCardsInZone: %i\", #result))\r\n--     return result\r\n-- end\r\n--\r\n-- function ObjectIsCard(Object)\r\n--     return Object.tag == 'Card'\r\n-- end\r\n--\r\n-- function CardIsInHand(PlayerColor, Card)\r\n--\r\n--     local result = false;\r\n--     local handZone = getObjectFromGUID(Hands[PlayerColor])\r\n--     if ZoneContainsCard(handZone, Card) then\r\n--         result = true\r\n--     end\r\n--     print(string.printf(\"CardIsInHand: %s is %s for %s\", Card.getName(), tostring(result), PlayerColor))\r\n--     return result\r\n-- end\r\n--\r\n-- function PrintPlayerWarning(PlayerColor, Message)\r\n--     printToColor(Message, PlayerColor, TextColors.Yellow)\r\n-- end\r\n\n----#include PeckingOrder/Main.ttslua",
  "LuaScriptState": "",
  "XmlUI": "<!-- Xml UI. See documentation: https://api.tabletopsimulator.com/ui/introUI/ -->",
  "VersionNumber": "v12.4.3"
}